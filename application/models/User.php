<?php

/**
 * Model_User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6698 2009-11-10 17:58:02Z jwage $
 */
class Model_User extends Model_Base_User
{
    const NOT_FOUND = 1;
    const WRONG_PW  = 2;

    /**
     * Perform authentication of a user
     * @param string $username
     * @param string $password
     */
    public static function authenticate($username, $password)
    {
        
        $user = Doctrine_Core::getTable('Model_User')->findOneByUser_name($username);

        if ($user)
        {
            if ($user->password == $password){
                $user->storeCookie();
                return $user;
            }

            throw new Exception(self::WRONG_PW);
        }
        throw new Exception(self::NOT_FOUND);
    }
    public function setPassword($password)
    {
        //should not do another md5 when retrieving a saved md5 from db...
        return $this->_set('password', md5($password));
    }
    public function storeCookie(){

        $cookie = array();
        $cookie['id'] = $this->id;
        $cookie['password'] = $this->password;
        setcookie('smotko_id', serialize($cookie), 60*60*60*24*356*3, '/');
    }
    public static function getUser($name, $pass){

        if(Zend_Registry::isRegistered('User')){
            $u = Zend_Registry::get('User');

            if($u != null && $u['user_name'] == $name)
            {
                
                $res = Doctrine_Query::create()
                        ->select()
                        ->from('Model_User u')
                        ->where('id = ?', $u['id'])
                        //->andWhere('password = ?', $u['password'])
                        ->fetchOne();
                
                if(!empty($u['password']) && $u['password'] != $res->password){
                    throw new Exception("Geslo ni pravilno.");
                }
                return $res;

            }
        }

        $res = Doctrine_Query::create()
                    ->select()
                    ->from('Model_User u')
                    ->where('user_name = ?', $name);
        if($pass != null)
            $res->andWhere('password IS NOT NULL');
        $res = $res->fetchOne();
        
        if(!$res){
            return $res;
        }
        
        if($res->password == null)
                return $res;
        if($res->password != (md5($pass))){
            throw new Exception("Nepravilno geslo za navedeno uporabniško ime");
        }
        return $res;
    }
    public static function getUserId($id){

        
        $res = Doctrine_Query::create()
                    ->select()
                    ->from('Model_User u');
        if(is_array($id)){
            $res->where('id = ?', $id['id']);
            if($id['password'] != null)
                $res->andWhere('password = ?', $id['password']);
        }
        else{
            $res->where('id = ?', $id);
        }
        return $res->fetchOne();
    }
    public static function setUser($form){

        $pass = null;
        $username = $form['user_name'];
        if(array_key_exists('password', $form))
            $pass = $form['password'];
        
        $user = Model_User::getUser($username, $pass);


        if(!$user)
        {
            $user = new Model_User();
          
            $user->user_name = $form['user_name'];
            if(empty($form['password']))
                $user->role = 'guest';
            else{
                $user->role = 'member';
                $user->password = $form['password'];
            }
        }
        else{

            $pass = $user->password;

            if(empty($pass) && !Model_User::isUsernameFree($form['user_name']))
                throw new Exception("Uporabniško ime ni na voljo!");
        }
        if($user->user_name != $form['user_name']){
            //throw new Exception("Uporabniškega imena zaenkrat še ni mogoče spreminjati.");
        }
        $user->user_name = $form['user_name'];
        //Zend_Debug::dump(is_null($form['user_url']));die;
        if(!is_null($form['user_url']))
            $user->user_url = $form['user_url'];
        //$user->user_email = $form['user_email'];
        $user->user_ip = getenv('REMOTE_ADDR');
        $user->user_agent = getenv('HTTP_USER_AGENT');

        $user->save();
        //Zend_Debug::dump($user->toArray());die;
        $user->storeCookie();
        return $user;
    }
    public static function isUsernameFree($name)
    {
        $q = Doctrine_Query::create()
                            ->select()
                            ->from('Model_User u')
                            ->where('password IS NOT NULL AND user_name = ?', $name)
                            ->fetchArray();

        return empty($q);
    }
    public static function getActiveUsers(){

        return Doctrine_Query::create()
                            ->select()
                            ->from('Model_User u')
                            ->where('role IN ("member", "admin")')
                            ->andWhere('debateCount > 5')
                            ->orderBy('debateCount DESC, user_name')
                            ->fetchArray();
    }
}